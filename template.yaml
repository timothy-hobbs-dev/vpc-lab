AWSTemplateFormatVersion: "2010-09-09"
Description: "Custom VPC with Public and Private Subnet"

Resources:
  # VPC
  MyVPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "10.0.0.0/16"
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: "Name"
          Value: "MyCustomVPC"

  # Internet Gateway (for Public Subnet)
  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet
  PublicSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.1.0/24"
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]

  # Private Subnet
  PrivateSubnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: "10.0.2.0/24"
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs ""]

  # Public Route Table
  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref MyVPC
  PublicRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateway (for Private Subnet Internet access)
  NatEIP:
    Type: "AWS::EC2::EIP"
  NatGateway:
    Type: "AWS::EC2::NatGateway"
    Properties:
      SubnetId: !Ref PublicSubnet
      AllocationId: !GetAtt NatEIP.AllocationId
  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref MyVPC
  PrivateRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway
  PrivateSubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Security Group for Instances (Allow SSH)
  InstanceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      VpcId: !Ref MyVPC
      GroupDescription: "Allow SSH inbound traffic"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"

  # EC2 Instance in Public Subnet
  PublicInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.micro"
      KeyName: "your-key-pair-name"
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds: [!Ref InstanceSecurityGroup]
      ImageId: "ami-0c55b159cbfafe1f0" # Amazon Linux 2 AMI (Change per region)
      Tags:
        - Key: "Name"
          Value: "PublicInstance"

  # EC2 Instance in Private Subnet
  PrivateInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      InstanceType: "t2.micro"
      KeyName: "your-key-pair-name"
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds: [!Ref InstanceSecurityGroup]
      ImageId: "ami-0c55b159cbfafe1f0" # Amazon Linux 2 AMI (Change per region)
      Tags:
        - Key: "Name"
          Value: "PrivateInstance"

Outputs:
  PublicInstance:
    Description: "Public Instance Public IP"
    Value: !GetAtt PublicInstance.PublicIp
  PrivateInstance:
    Description: "Private Instance Private IP"
    Value: !GetAtt PrivateInstance.PrivateIp
